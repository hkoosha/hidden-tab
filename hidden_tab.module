<?php

/**
 * @file
 * Hidden_tab module.
 *
 * Provides a hidden tab on entity, where this tab (page) can only be accessed
 *   via a secret Uri, generated by plugins or by this module according to a
 *   secret key.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Render\Element\InlineTemplate;
use Drupal\hidden_tab\Plugable\MailDiscovery\HiddenTabMailDiscoveryPluginManager;
use Drupal\hidden_tab\Plugable\Template\HiddenTabTemplatePluginManager;
use Drupal\hidden_tab\Utility;
use Drupal\node\Entity\NodeType;


define('HIDDEN_TAB_TARGET_TYPE', 'node');


/**
 * Implements hook_theme().
 *
 * Plugins provide templates. For each template we register a theme by our
 * own name. The variables passed to template (as a file, provided by plugins)
 * are
 * 1. Variable current_user (which is, well, the current user)
 * 2. Variable regions, an object, containing reg_0, reg_1, ...
 *
 * @see \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface
 * @return array
 */
function hidden_tab_theme() {
  $t = [];
  /** @var \Drupal\hidden_tab\Plugable\Template\HiddenTabTemplateInterface $plugin */
  foreach (HiddenTabTemplatePluginManager::man()->plugins() as $plugin) {
    $id = 'hidden_tab_' . $plugin->id();
    $t[$id] = [
      'variables' => $plugin->themeVariables(),
      'template' => $plugin->templateFile(),
      'path' => $plugin->templateFilePath(),
    ];
  }

  $t['hidden_tab_credit'] = [
    'render element' => 'elements',
  ];

  $t['hidden_tab_mailer'] = [
    'render element' => 'elements',
  ];

  return $t;
}

/**
 * Prepares variables for hidden_tab_credit templates.
 *
 * Default template: hidden-tab-admin-credit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the xxx information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hidden_tab_credit(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for hidden tab mailer templates.
 *
 * Default template: hidden-tab-internal-mailer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the hidden tab mailer
 *   information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hidden_tab_mailer(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 */
function hidden_tab_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'hidden_tab_page') {
    return;
  }
  $remover = function (string $associated_type, string $associated_label) use ($entity) {
    try {
      $items_storage = \Drupal::entityTypeManager()
        ->getStorage($associated_type);
      $items = $items_storage
        ->loadByProperties([
          'target_hidden_tab_page' => $entity->id(),
        ]);
      $say = [];
      foreach ($items as $item) {
        $say[] = $item->id();
      }
      $items_storage->delete($items);
      if (count($items)) {
        \Drupal::messenger()->addStatus(t('@label removed: @items', [
          '@label' => $associated_label,
          '@items' => implode(', ', $say),
        ]));
      }
    }
    catch (\Throwable $error) {
      \Drupal::logger('hidden_tab')
        ->error(t('Error while deleting {label} for page={page} msg={msg} trace={trace}', [
          'label' => $associated_label,
          'type' => $entity->id(),
          'msg' => $error->getMessage(),
          'trace' => $error->getTraceAsString(),
        ]));
      \Drupal::messenger()
        ->addWarning(t('Error removing @label please check the log.', [
          '@label' => $associated_label,
        ]));
    }
  };
  $remover('hidden_tab_credit', 'Hidden Tab Credits');
  $remover('hidden_tab_placement', 'Hidden Tab Placements');
  $remover('hidden_tab_mailer', 'Hidden Tab Mailers');
}


/**
 * Implements hook_entity_extra_field_info().
 */
function hidden_tab_page_mailer_entity_extra_field_info(): array {
  if (!\Drupal::currentUser()
    ->hasPermission('send immediate hidden_tab_page_mailer mail')) {
    return [];
  }
  $plugins = HiddenTabMailDiscoveryPluginManager::man()->plugins();
  if (empty($plugins)) {
    return [];
  }
  $pages = Utility::pages();
  if (empty($pages)) {
    return [];
  }
  $bundles = NodeType::loadMultiple();
  if (empty($bundles)) {
    return [];
  }
  $extra = [];
  foreach ($pages as $page) {
    $mails = PUtility::mailConfigOfPage($page->id());
    foreach ($mails as $mail) {
      if (!isset($plugins[$mail->plugin()])) {
        \Drupal::logger('hidden_tab_page_mailer')
          ->error('missing mail plugin: {plugin}', ['plugin' => $mail->plugin()]);
        continue;
      }
      $plugin = $plugins[$mail->plugin()];
      /** @var \Drupal\node\Entity\NodeType $bundle */
      foreach ($bundles as $bundle) {
        $extra['node'][$bundle->id()]['display']['hidden_tab_email_it__' . $plugin->id() . '__' . $page->id() . '__' . $mail->id()] = [
          'label' => t('Email It :: page=page mailer=@mailer plugin=@plugin', [
            '@page' => $page->label(),
            '@mailer' => $mail->label(),
            '@plugin' => $plugin->label(),
          ]),

          'weight' => 100,
          'visible' => TRUE,
        ];
      }
    }
  }
  return $extra;
}

/**
 * TODO fixme, do not load all.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *
 * @return \Drupal\Core\Entity\EntityInterface[]
 *   ALLLL the nodes.
 */
function _hidden_tab_page_mailer_entities_crazy(): array {
  return \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple();
}

/**
 * Implements hook_mail().
 */
function hidden_tab_page_mailer_mail($key, $message, $params) {
  /** @var \Drupal\hidden_tab\Entity\HiddenTabPageInterface $page */
  $page = $params['page'];
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $params['entity'];
  /** @var \Drupal\hidden_tab\Entity\HiddenTabPageMailerInterface $mailer
   */
  $mailer = $params['mailer'];
  $email = $params['email'];

  $ctx = [
    'entity' => $entity,
    'page' => $page,
    'mailer' => $mailer,
    'email' => $email,
  ];

  $title_tpl = [
    '#template' => $mailer->emailTitleTemplate(),
    '#context' => $ctx,
  ];
  $title_render = InlineTemplate::preRenderInlineTemplate($title_tpl);
  $title_text = \Drupal::service('renderer')->render($title_render);

  $ctx['subject'] = $title_text;
  $email_tpl = [
    '#template' => $mailer->emailTemplate(),
    '#context' => $ctx,
  ];
  $email_render = InlineTemplate::preRenderInlineTemplate($email_tpl);
  $email_text = \Drupal::service('renderer')->render($email_render);

  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['to'] = $email;
  $message['subject'] = $title_text;
  $message['body'][] = $email_text;
}

/**
 * Implements hook_cron().
 *
 * CRAZY CRON!!
 *
 * TODO do not load all nodes FIXME.
 */
function hidden_tab_page_mailer_cron() {
  $plugins = HiddenTabMailDiscoveryPluginManager::man()->plugins();
  if (empty($plugins)) {
    return;
  }
  $pages = Utility::pages();
  if (empty($pages)) {
    return;
  }
  $entities = _hidden_tab_page_mailer_entities_crazy();
  if (empty($entities)) {
    return;
  }
  $ok = [];
  $no = [];
  foreach ($pages as $page) {
    $mails = PUtility::mailConfigOfPage($page->id());
    foreach ($mails as $mail) {
      if (!$mail->status()) {
        continue;
      }
      if (!isset($plugins[$mail->plugin()])) {
        \Drupal::logger('hidden_tab_page_mailer')
          ->error('missing mail plugin: {plugin}', ['plugin' => $mail->plugin()]);
        continue;
      }
      $last = \Drupal::state()->get('hidden_tab_page_mailer_' . $mail->id());
      if (($last + $mail->emailScheduleInSeconds()) > time()) {
        continue;
      }
      $plugin = $plugins[$mail->plugin()];
      foreach ($entities as $entity) {
        $email = $plugin->findMail($mail, $page, $entity);
        if (!$email) {
          continue;
        }
        $msg = 'entity=' . $entity->id() . ', page=' . $page->id() . ', type=' . $entity->getEntityTypeId();
        if (PUtility::email($email, $page, $entity, $mail)) {
          $ok[] = $msg;
        }
        else {
          $no[] = $msg;
        }
      }
      \Drupal::state()->set('hidden_tab_page_mailer_' . $mail->id(), time());
    }
  }
  \Drupal::logger('hidden_tab')
    ->warning('failed to email: ' . implode(' / ', $no));
  \Drupal::logger('hidden_tab')
    ->notice('sent email: ' . implode(' / ', $ok));
}

